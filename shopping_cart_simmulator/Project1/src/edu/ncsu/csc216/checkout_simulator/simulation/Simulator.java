/**
 * 
 */
package edu.ncsu.csc216.checkout_simulator.simulation;

import java.awt.Color;

import edu.ncsu.csc216.checkout_simulator.items.Cart;
import edu.ncsu.csc216.checkout_simulator.queues.CheckoutRegister;
import edu.ncsu.csc216.checkout_simulator.queues.LineOfItems;
import edu.ncsu.csc216.checkout_simulator.queues.Store;

/**
 * This class runs the carts from the beginning of the register line to the 
 * front checkout location.
 * @author premsubedi
 */
public class Simulator {

	/** Constant for minimum number of registers that store can have */
	private static final int MIN_NUM_REGISTERS = 3 ;

	/** Constant for maximum number of registers that store can have */
	private static final int MAX_NUM_REGISTERS = 12 ;

	/** EventCalendar object to control the order of events */
	private EventCalendar theCalendar;

	/** The current cart in the simulation */
	private Cart currentCart;

	/** number of registers */
	private int numRegisters;

	/** The number of carts in the store */
	private int numCarts;

	/** Number of steps being taken into the cart. */
	private int stepsTaken;

	/** Store object being passed as parameter */
	private Store theStore;

	/** keep track of the statistics */
	private Log myLog;

	/** Array of checkout register */
	private CheckoutRegister[] arrayRegister;



	/**
	 * Class constructor that initializes/constructs it's fields
	 * @param numberOfRegisters total number of registers in a store
	 * @param numberOfCarts total number of carts generated by cart factory
	 * @throws IllegalArgumentException when the number of register are out of bound [3, 12]
	 * @throws IllegalArgumentException when the number of carts are less than zero.
	 */
	public Simulator(int numberOfRegisters, int numberOfCarts) {

		this.myLog = new Log();
		this.setNumCarts(numberOfCarts);
		this.setNumberOfRegister(numberOfRegisters);
		this.setUp();
	}

	private void setUp() {
		System.out.println("" + numRegisters) ;
		arrayRegister = new CheckoutRegister[numRegisters];
		for (int i = 0; i < numRegisters; i++) {
			arrayRegister[i] = new CheckoutRegister(myLog);
		}
		this.theStore = new Store(numCarts, arrayRegister);
		theCalendar = new EventCalendar(arrayRegister, theStore);
	}

	/**
	 * Sets valid number of carts
	 * @throws IllegalArgumentException if there is no cart.
	 * @param numberOfCart number of carts entered.
	 */
	public void setNumCarts(int numberOfCart) {
		if(numberOfCart < 1) {
			throw new IllegalArgumentException("There must be at least one shopping cart in the simulation.");
		} 
		this.numCarts = numberOfCart;		
	}

	/**
	 * Sets valid number of registers
	 * @throws IllegalArgumentException if the number of carts is less than 3 or more than 12.
	 * @param numRegister number of register.
	 */
	public void setNumberOfRegister(int numRegister) {
		if(numRegister < MIN_NUM_REGISTERS || numRegister > MAX_NUM_REGISTERS) {
			throw new IllegalArgumentException("Number of registers must be between 3 and 12 inclusive.");
		} 
		this.numRegisters = numRegister;   	
	}
	/** 
	 * Returns the array of colors assigned to the different Cart types.
	 * @return c array of colors
	 */
	public static Color[] simulationColors() {
		Color [] colors = {Color.GREEN, Color.BLUE, Color.RED};
		return colors;
	}
	/**
	 * Returns the array of strings describing the different Cart types.
	 * @return label an array of cart types
	 */
	public static String[] simulationLabels() {
		String [] label = {"Express Carts", "Regular Carts", "Special Carts"};
		return label;
	}

	/** Handle the next event from the EventCalendar. */
	public void step() {
		currentCart = null;

		LineOfItems line = theCalendar.nextToBeProcessed();
		if (line.hasNext()) {
			currentCart = line.processNext();
		} 
		this.stepsTaken++;


	}
	/** 
	 * Returns average number of seconds carts had to wait
	 * in checkout register lines prior to actually checking out.
	 * @return myLog.averageWaitTime() average wait time of a cart
	 */
	public double averageWaitTime() {
		return myLog.averageWaitTime();
	}

	/**
	 * Returns average number of seconds that carts spent in checking out.
	 * @return myLog.averageProcessTime() average process time of cart.
	 */
	public double averageProcessTime() {
		return myLog.averageProcessTime();
	}

	/**
	 * Returns true if the simulation has not yet finished, false if it has
	 * @return myLog.getNumCompleted() < numCarts  if total carts completed 
	 * is less than number of carts.
	 */
	public boolean moreSteps() {
		return myLog.getNumCompleted() < numCarts;
	}

	/**
	 * Returns total number of steps taken during checkout
	 * @return numCarts*2 total number of steps for numCarts
	 */
	public int totalNumberOfSteps() {
		return numCarts * 2;
	}

	/**
	 * Returns color of a current cart being checking out 
	 * @return currentCart.getColor() color of the current cart.
	 */
	public Color getCurrentCartColor() {
		if(currentCart == null) {
			return null;
		}
		return currentCart.getColor();
	}

	/**
	 * Returns true if the most recently handled cart completed checking out
	 * and left a register line, false otherwise.
	 * @return !currentCart.isWaitingInRegisterLine() if the cart left
	 */
	public boolean itemLeftSimulation() {
		if (currentCart == null) {
			return false;
		}
		return !currentCart.isWaitingInRegisterLine();
	}

	/**
	 * Returns total number of steps that were already taken
	 * @return stepsTaken number of steps taken by the register
	 */
	public int getStepsTaken() {
		return stepsTaken;
	}

	/**
	 * Index of CheckoutRegister selected by the currentCart,
	 * Or -1 if currentCart is null.
	 * @return currentCart.getRegisterIndex() index of the register
	 */
	public int getCurrentIndex() {
		if(currentCart == null) {
			return -1;
		}
		return currentCart.getRegisterIndex();
	}

}
